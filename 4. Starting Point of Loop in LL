Medium Level
https://leetcode.com/problems/linked-list-cycle-ii/description/

Mathematical Proof by Anuj Bhaiya:
https://www.youtube.com/watch?v=jcZtMh_jov0

ListNode *detectCycle(ListNode *head) {
    ListNode *slow = head, *fast = head;
    
    // detecting loop
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) break;
    }
    
    // if not loop then return NULL
    if (!(fast && fast->next)) return NULL;
    
    // finding the Starting Node
    while (head != slow) {
        head = head->next;
        slow = slow->next;
    }
    return head;
}

TC: O(N)
SC: O(1)
