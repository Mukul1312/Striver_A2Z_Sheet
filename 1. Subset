Medium Level
https://leetcode.com/problems/subsets/description/

Note: The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [0]
Output: [[],[0]]

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Naive Approach: Using Recursion

class Solution {
public:
    vector<vector<int>> solve(int i, vector<int>& nums, vector<int>& ds,vector<vector<int>>&ans){
        if (i == nums.size()) {
            ans.push_back(ds);
            return ans;
        }
        //picking
        ds.push_back(nums[i]);
        solve(i + 1, nums,  ds, ans);
        //poping out while backtracking
        ds.pop_back();
        solve(i + 1, nums,  ds, ans);        
        return ans; 
        }
        vector<vector<int>> subsets(vector<int>& nums) {
            vector<int> ds;
            vector<vector<int>> ans;
            return solve(0, nums, ds, ans);
        }
};

TC: O(2^N) due for each ele we have 2 possibilties take & not take.
SC: O(N) due to the depth of tree.
